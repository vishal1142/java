@Library('jenkinslibrary') _
//
pipeline {
    agent any

    environment {
        // AWS-related environment variables
        AWS_REGION     = 'us-east-2'
        ECR_REPOSITORY = '131664697495.dkr.ecr.us-east-2.amazonaws.com'
        IMAGE_NAME     = 'vishal'
        AWS_ACCOUNT_ID = '131664697495'
        // DockerHub username (set as Jenkins credentials)
        DOCKERHUB_USER = credentials('dockerhub-credentials-id')  // Reference to Jenkins credentials
    }

    parameters {
        choice(name: 'action', choices: ['create', 'delete'], description: 'Choose create or delete')
        string(name: 'ImageName', defaultValue: 'vishal', description: 'Name of the Docker image')
        string(name: 'ImageTag', defaultValue: 'latest', description: 'Tag of the Docker image')
        string(name: 'DockerHubUser', defaultValue: 'awsdevops12345', description: 'DockerHub username')
        string(name: 'AWS_ACCOUNT_ID', defaultValue: '131664697495', description: 'AWS Account ID')
        string(name: 'REGION', defaultValue: 'us-east-2', description: 'AWS Region')
        string(name: 'ECR_REPO_NAME', defaultValue: 'vishal', description: 'ECR Repository Name')
    }

    stages {
        stage('Git Checkout') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    echo 'Checking out source code...'
                    gitCheckout(
                        branch: 'main',
                        url: 'https://github.com/vishal1142/java.git'
                    )
                }
            }
        }

        stage('Unit Test') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    echo 'Running unit tests...'
                    mvnTest()
                }
            }
        }

        stage('Integration Test') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    echo 'Running integration tests...'
                    mvnIntegrationTest()
                }
            }
        }

        stage('Static Code Analysis (SonarQube)') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    echo 'Performing static code analysis with SonarQube...'
                    staticCodeAnalysis(
                        credentialsId: 'sonarqube-api',
                        sonarHostUrl: 'http://192.168.1.141:9000',
                        sonarProjectKey: 'java-jenkins-demo',
                        sonarProjectName: 'Java Jenkins Demo',
                        sonarProjectVersion: '1.0'
                    )
                }
            }
        }

        stage('Quality Gate Check') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    echo 'Checking SonarQube Quality Gate status...'
                    QualityGateStatus(credentialsId: 'sonarqube-api')
                }
            }
        }

        stage('Maven Build') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    echo 'Building the project with Maven...'
                    mvnBuild()
                }
            }
        }

        stage('Docker Build') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    def fullImageName = "${params.DockerHubUser}/${params.ImageName}:${params.ImageTag}"
                    echo "Building Docker image: ${fullImageName}"
                    dockerBuild(
                        ImageName: params.ImageName,
                        ImageTag: params.ImageTag,
                        DockerHubUser: params.DockerHubUser
                    )
                }
            }
        }

        stage('Trivy Scan') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    echo 'Scanning the Docker image for vulnerabilities using Trivy...'
                    dockerImageScan(
                        ImageName: params.ImageName,
                        ImageTag: params.ImageTag,
                        DockerHubUser: params.DockerHubUser
                    )
                }
            }
        }

        stage('Docker Push') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    echo 'Pushing Docker image to DockerHub...'
                    DockerImagePush(
                        params.ImageName,
                        params.ImageTag,
                        params.DockerHubUser
                    )
                }
            }
        }

        stage('Login to ECR') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'ecr-credentials', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                        sh """
                            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                        """
                    }
                }
            }
        }

        stage('Push DockerHub Image to ECR') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    // DockerHub and AWS ECR configuration
                    def dockerhubImage = "${DOCKERHUB_USER}/${params.ImageName}:${params.ImageTag}"
                    def ecrImage = "${AWS_ACCOUNT_ID}.dkr.ecr.${params.REGION}.amazonaws.com/${ECR_REPOSITORY}:${params.ImageTag}"

                    // Logging into AWS ECR and DockerHub, pulling and pushing the image
                    try {
                        echo "Logging into AWS ECR..."
                        withCredentials([usernamePassword(credentialsId: 'aws-ecr-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY'),
                                         usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASSWORD')]) {

                            // AWS ECR login
                            sh """
                                aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                                aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                                aws configure set region ${params.REGION}
                                aws ecr get-login-password --region ${params.REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${params.REGION}.amazonaws.com
                            """

                            // Pull image from DockerHub
                            echo "Pulling image from DockerHub: ${dockerhubImage}..."
                            sh "docker pull ${dockerhubImage}"

                            // Tag the image for ECR
                            echo "Tagging Docker image for ECR..."
                            sh "docker tag ${dockerhubImage} ${ecrImage}"

                            // Push the image to AWS ECR
                            echo "Pushing image to ECR: ${ecrImage}..."
                            sh "docker push ${ecrImage}"

                            // Logout from Docker
                            echo "Logging out from Docker..."
                            sh "docker logout ${AWS_ACCOUNT_ID}.dkr.ecr.${params.REGION}.amazonaws.com"
                        }
                    } catch (Exception e) {
                        error "An error occurred during the image transfer to ECR: ${e.message}"
                    }
                }
            }
        }

    }

    post {
        always {
            echo 'This will always run - Pipeline finished.'
        }
        success {
            echo 'Pipeline succeeded successfully!'
        }
        failure {
            echo 'Pipeline failed. Please check the errors.'
        }
    }
}
