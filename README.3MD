@Library('jenkinslibrary') _

pipeline {
    agent any

    parameters {
        choice(name: 'action', choices: ['create', 'delete'], description: 'Choose create or delete')
        string(name: 'ImageName', defaultValue: 'javapp', description: 'Name of the Docker image')
        string(name: 'ImageTag', defaultValue: 'v1', description: 'Tag of the Docker image')
        string(name: 'DockerHubUser', defaultValue: 'awsdevops12345', description: 'DockerHub username')
    }

    stages {
        stage('Git Checkout') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    echo 'Checking out source code...'
                    gitCheckout(
                        branch: 'main',
                        url: 'https://github.com/vishal1142/java.git'
                    )
                }
            }
        }

        stage('Unit Test') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    echo 'Running unit tests...'
                    mvnTest()
                }
            }
        }

        stage('Integration Test') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    echo 'Running integration tests...'
                    mvnIntegrationTest()
                }
            }
        }

        stage('Static Code Analysis (SonarQube)') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    echo 'Performing static code analysis with SonarQube...'
                    staticCodeAnalysis(
                        credentialsId: 'sonarqube-api',
                        sonarHostUrl: 'http://192.168.1.141:9000',
                        sonarProjectKey: 'java-jenkins-demo',
                        sonarProjectName: 'Java Jenkins Demo',
                        sonarProjectVersion: '1.0'
                    )
                }
            }
        }

        stage('Quality Gate Check') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    echo 'Checking SonarQube Quality Gate status...'
                    QualityGateStatus(credentialsId: 'sonarqube-api')
                }
            }
        }

        stage('Maven Build') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    echo 'Building the project...'
                    mvnBuild()
                }
            }
        }

        stage('Docker Build') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    def fullImageName = "${params.DockerHubUser}/${params.ImageName}:${params.ImageTag}"
                    echo "Building image: ${fullImageName}"
                    dockerBuild(
                        ImageName: params.ImageName,
                        ImageTag: params.ImageTag,
                        DockerHubUser: params.DockerHubUser
                    )
                }
            }
        }

        // Trivy Scan Stage
        stage('Trivy Scan') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    echo 'Scanning the Docker image for vulnerabilities...'
                    // Call the trivy image scan function here
                    dockerImageScan(
                        ImageName: params.ImageName,
                        ImageTag: params.ImageTag,
                        DockerHubUser: params.DockerHubUser
                    )
                }
            }
        }
    }

        stage('Docker Push') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    echo 'Pushing Docker image to DockerHub...'
                    DockerImagePush(
                        params.ImageName,
                        params.ImageTag,
                        params.DockerHubUser
                    )
                }
            }
        }
    }
    
    post {
        always {
            echo 'This will always run'
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}



        // stage('Build ECR') {
        //     when {
        //         expression { params.action == 'create' }
        //     }
        //     steps {
        //         script {
        //             // Build and push the Docker image to ECR
        //             dockerBuildECR("${params.AWS_ACCOUNT_ID}", "${params.REGION}", "${params.ECR_REPO_NAME}")
        //         }
        //     }
        // }

        // stage('Docker Cleanup') {
        //     when {
        //         expression { params.action == 'create' }
        //     }
        //     steps {
        //         script {
        //             echo 'Performing Docker cleanup...'
        //             sh 'docker system prune -f'
        //         }
        //     }
        // }

                stage('Login to AWS ECR') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'ecr-credentials', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                        sh """
                            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                        """
                    }
                }
            }
        }

        stage('Login to AWS ECR') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: 'aws-ecr-creds',
                        usernameVariable: 'AWS_ACCESS_KEY_ID',
                        passwordVariable: 'AWS_SECRET_ACCESS_KEY'
                    )]) {
                        sh """
                            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                            aws configure set default.region ${params.REGION}
                            aws ecr get-login-password --region ${params.REGION} | docker login --username AWS --password-stdin ${params.AWS_ACCOUNT_ID}.dkr.ecr.${params.REGION}.amazonaws.com
                        """
                    }
                }
            }
        }
    }